name: Linting using ESLint

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: 'lts/*'

jobs:
  eslint-linter-job:
    name: Linting using ESLint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ hashFiles('package.json') }}
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install dependencies (cached)
        if: steps.cache-node-modules.outputs.cache-hit == 'true'
        run: echo "‚úÖ Using cached node_modules"

      - name: Check for outdated dependencies
        id: check-outdated
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          if npm outdated > /dev/null 2>&1; then
            echo "outdated=true" >> $GITHUB_OUTPUT
            echo "üîÑ Outdated dependencies found"
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All dependencies are up to date"
          fi

      - name: Update dependencies (if needed)
        if: steps.check-outdated.outputs.outdated == 'true'
        run: |
          echo "üîÑ Updating dependencies..."
          npm update
          echo "‚úÖ Dependencies updated"

      - name: Verify ESLint configuration
        run: |
          echo "üîç Verifying ESLint configuration..."
          if [ -f "eslint.config.mjs" ]; then
            echo "‚úÖ ESLint configuration file found"
            cat eslint.config.mjs
          else
            echo "‚ùå ESLint configuration file not found"
            exit 1
          fi

      - name: Run ESLint and Check Results
        run: |
          echo "üîç Running ESLint..."
          
          # Run lint and capture output, but don't fail immediately
          set +e
          LINT_OUTPUT=$(npm run lint 2>&1)
          LINT_EXIT_CODE=$?
          set -e
          
          echo "$LINT_OUTPUT"
          
          echo "üìä Linting Summary:"
          echo "=================="
          
          # Count errors and warnings (ESLint outputs "Error:" and "Warning:")
          ERROR_COUNT=$(echo "$LINT_OUTPUT" | grep -c "Error:" || echo "0")
          WARNING_COUNT=$(echo "$LINT_OUTPUT" | grep -c "Warning:" || echo "0")
          
          # Remove any newlines and ensure they're integers
          ERROR_COUNT=$(echo "$ERROR_COUNT" | tr -d '\n')
          WARNING_COUNT=$(echo "$WARNING_COUNT" | tr -d '\n')
          
          echo "Errors: $ERROR_COUNT"
          echo "Warnings: $WARNING_COUNT"
          
          # Generate GitHub Job Summary
          {
            echo "## üìä ESLint Pipeline Summary"
            echo ""
            echo "| Check | Status | Count |"
            echo "|-------|--------|-------|"
            if [ "$ERROR_COUNT" -gt 0 ] || [ "$LINT_EXIT_CODE" -ne 0 ]; then
              echo "| Errors | ‚ùå | $ERROR_COUNT |"
              echo "| Warnings | ‚ö†Ô∏è | $WARNING_COUNT |"
              echo "| Pipeline | ‚ùå FAILED | - |"
            else
              echo "| Errors | ‚úÖ | $ERROR_COUNT |"
              echo "| Warnings | ‚ö†Ô∏è | $WARNING_COUNT |"
              echo "| Pipeline | ‚úÖ PASSED | - |"
            fi
          } >> $GITHUB_STEP_SUMMARY
          
          # Show detailed error information
          if [ "$ERROR_COUNT" -gt 0 ] || [ "$LINT_EXIT_CODE" -ne 0 ]; then
            echo "‚ùå Pipeline failed due to $ERROR_COUNT error(s)"
            exit 1
          else
            echo "‚úÖ Pipeline passed with $WARNING_COUNT warning(s)"
          fi

