name: Deploy Next Japan with Monitoring Stack to EC2

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed

jobs:
  deploy:
    name: Install Docker and Deploy Next Japan with Monitoring Stack
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Install Docker and Configure Group
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          SSH_USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          REPO: ${{ github.repository }}
        run: |
          echo "$SSH_KEY" | ssh -i /dev/stdin -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST 'bash -s' <<'EOF'
            set -e

            echo "🔄 Updating Ubuntu..."
            sudo apt update && sudo apt upgrade -y

            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              sudo apt-get install -y ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl enable --now docker
              sudo usermod -aG docker $USER
            else
              echo "✅ Docker is already installed"
            fi
          EOF

      - name: Re-login and Start Monitoring Stack
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          SSH_USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" | ssh -i /dev/stdin -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST 'bash -s' <<'EOF'
            set -e

            REPO_URL="https://github.com/${REPO}.git"
            REPO_DIR="$HOME/devops-next-japan"

            if [ ! -d "$REPO_DIR" ]; then
              echo "📁 Cloning repository..."
              git clone "$REPO_URL" "$REPO_DIR"
            else
              echo "📁 Pulling latest changes..."
              cd "$REPO_DIR"
              git pull origin main
            fi

            cd "$REPO_DIR/.aws/monitoring"

            echo "🔍 Checking for running containers..."
            if docker compose ps -q | grep .; then
              echo "⚠️ Stopping existing containers..."
              docker compose down
            fi

            echo "⬇️ Pulling latest Docker images..."
            docker compose pull

            echo "🚀 Starting monitoring stack..."
            docker compose up -d

            echo "✅ Monitoring stack deployed!"
            echo "Next Japan: http://$(curl -s ifconfig.me)"
            echo "Next Japan (with specified port): http://$(curl -s ifconfig.me):3030"
            echo "Prometheus: http://$(curl -s ifconfig.me):9090"
            echo "Grafana: http://$(curl -s ifconfig.me):3000"
          EOF

